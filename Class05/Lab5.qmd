---
title: "Class 05: Data Visualization with GGPLOT"
author: "Xiaoyan Wang(A16454066)"
format: pdf
editor: visual
---

**Q1.** For which phases is data visualization important in our scientific workflows?

All of the above

**Q2.** True or False? The ggplot2 package comes already installed with R?

False

**Q3.** Which plot types are typically NOT used to compare distributions of numeric variables?

Network graphs

**Q4.** Which statement about data visualization with ggplot2 is incorrect?

ggplot2 is the only way to create plots in R

## **Plot in R**

```{r}
View(cars)
plot(cars)
```

## **Plot in ggplot**

## **Specifing a dataset**

```{r}
#install.packages("ggplot2")
library(ggplot2)

ggplot(cars)
```

## **Specifing aesthetic mappings**

```{r}
ggplot(cars) +
  aes(x=speed, y=dist)
```

## **Specifing a geom layer**

```{r}
ggplot(data=cars) +
  aes(x=speed, y=dist) +
  geom_point()
```

**Q5.** Which geometric layer should be used to create scatter plots in ggplot2? 

geom_point()

**Q6.** In your own RStudio can you add a trend line layer to help show the relationship between the plot variables with the `geom_smooth()` function?

```{r}
ggplot(data=cars) +
  aes(x=speed, y=dist) +
  geom_point() +
  geom_smooth()
```

**Q7.** Argue with `geom_smooth()` to add a straight line from a linear model without the shaded standard error region?

```{r}
ggplot(data=cars) +
  aes(x=speed, y=dist) +
  geom_point() +
  geom_smooth(method="lm")
```

**Q8.** Can you finish this plot by adding various label annotations with the `labs()` function and changing the plot look to a more conservative “black & white” theme by adding the `theme_bw()` function:

```{r}
ggplot(data=cars) + 
  aes(x=speed, y=dist) +
  geom_point() +
  labs(title="Speed and Stopping Distances of Cars",
       x="Speed (MPH)", 
       y="Stopping Distance (ft)",
       subtitle = "linear model",
       caption="Dataset: 'cars'") +
  geom_smooth(method="lm", se=FALSE) +
  theme_bw()
```

## **Adding more plot aesthetics**

```{r}
url <- "https://bioboot.github.io/bimm143_S20/class-material/up_down_expression.txt"
genes <- read.delim(url)
head(genes)
```

**Q9.** Use the `nrow()` function to find out how many genes are in this dataset. What is your answer?

```{r}
nrow(genes)
```

**Q10.** Use the `colnames()` function and the `ncol()` function on the `genes` data frame to find out what the column names are (we will need these later) and how many columns there are. How many columns did you find?

4 columns were found

```{r}
colnames(genes)
ncol(genes)
```

**Q11.** Use the `table()` function on the `State` column of this data.frame to find out how many ‘up’ regulated genes there are. What is your answer?

127

```{r}
table(genes$State)
```

**Q12.** Using your values above and 2 significant figures. What fraction of total genes is up-regulated in this dataset?

2.44%

```{r}
round(table(genes$State)/nrow(genes)*100,2)
```

**Q13.** Complete the code below to produce the following plot

```{r}
ggplot(genes) + 
    aes(x=Condition1,y=Condition2) +
    geom_point()
```

```{r}
#Add some color
p <- ggplot(genes) + 
    aes(x=Condition1, y=Condition2, col=State) +
    geom_point()
p
```

**Q13.** Nice, now add some plot annotations to the `p` object with the `labs()` function so your plot looks like the following:

```{r}
p + scale_colour_manual(values=c("blue","gray","red"))+
  labs(title="Gene Expresion Changes Upon Drug Treatment",
         x="Control (no drug) ",
         y="Drug Treatment")
```

# **Going Further(optional)**

```{r}
# File location online
url <- "https://raw.githubusercontent.com/jennybc/gapminder/master/inst/extdata/gapminder.tsv"

gapminder <- read.delim(url)
```

```{r}
# install.packages("dplyr") 
library(dplyr)

gapminder_2007 <- gapminder %>% filter(year==2007)
```

\
Let’s consider the `gapminder_2007` dataset which contains the variables GDP per capita `gdpPercap` and life expectancy `lifeExp` for 142 countries in the year 2007

**Q1.** Complete the code below to produce a first basic scater plot of this `gapminder_2007` dataset:

```{r}
ggplot(gapminder_2007) +
  aes(x=gdpPercap, y=lifeExp) +geom_point()
```

```{r}
#Adjust points
g <- ggplot(gapminder_2007) +
  aes(x=gdpPercap, y=lifeExp)
g +geom_point(alpha=0.5)
```

```{r}
g+ aes(color=continent, size = pop)+geom_point(alpha=0.5)
```

```{r}
g+ aes(color=pop)+geom_point(alpha=0.8)
```

```{r}
g+ aes(size=pop)+geom_point(alpha=0.5)
```

**Q3.** Can you adapt the code you have learned thus far to reproduce our gapminder scatter plot for the year 1957? What do you notice about this plot is it easy to compare with the one for 2007?

Steps to produce your 1957 plot should include:

-   Use dplyr to `filter` the `gapmider` dataset to include only the year 1957 (check above for how we did this for 2007).

-   Save your result as `gapminder_1957`.

-   Use the `ggplot()` function and specify the `gapminder_1957` dataset as input

-   Add a `geom_point()` layer to the plot and create a scatter plot showing the GDP per capita `gdpPercap` on the x-axis and the life expectancy `lifeExp` on the y-axis

-   Use the `color` aesthetic to indicate each `continent` by a different color

-   Use the `size` aesthetic to adjust the point size by the population pop

-   Use `scale_size_area()` so that the point sizes reflect the actual population differences and set the `max_size` of each point to 15 -Set the opacity/transparency of each point to 70% using the `alpha=0.7` parameter

```{r}
gapminder_1957<-gapminder%>%filter(year==1957)

ggplot(gapminder_1957)+aes(x=gdpPercap, y=lifeExp, color=continent,size = pop) +
  geom_point(alpha=0.7) + 
  scale_size_area(max_size = 15) 
```

**Q4.** Do the same steps above but include 1957 and 2007 in your input dataset for `ggplot()`. You should now include the layer `facet_wrap(~year)` to produce the following plot:

```{r}
gapminder_1957<-gapminder%>%filter(year==1957|year==2007)

ggplot(gapminder_1957)+aes(x=gdpPercap, y=lifeExp, color=continent,size = pop) +
  geom_point(alpha=0.7) + 
  scale_size_area(max_size = 15)+
  facet_wrap(~year)
```

# **Combining plots**

Example:

```{r}
#install.packages("patchwork") 
library(patchwork)

# Setup some example plots 
p1 <- ggplot(mtcars) + geom_point(aes(mpg, disp))
p2 <- ggplot(mtcars) + geom_boxplot(aes(gear, disp, group = gear))
p3 <- ggplot(mtcars) + geom_smooth(aes(disp, qsec))
p4 <- ggplot(mtcars) + geom_bar(aes(carb))

# Use patchwork to combine them here:
(p1 | p2 | p3) /
      p4
```
