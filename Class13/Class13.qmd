---
title: "Class13: Transcriptomics and the analysis of RNA-Seq data"
author: "Xiaoyan Wang(A16454055)"
format: pdf
editor: visual
---

Today we will analyze some RNASeq data from Himes et al.

```{r}
# For this class we will need DESeq2:
# BiocManager::install("DESeq2")
library(BiocManager)
library(DESeq2)
library(ggplot2)
```

Data import

```{r}
# Complete the missing code
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <- read.csv("airway_metadata.csv")
```

```{r}
head(counts)
```

```{r}
head(metadata)
```

**Q1.** How many genes are in this dataset?

```{r}
nrow(counts)
```

**Q2.** How many ‘control’ cell lines do we have?

```{r}
table(metadata$dex)
```

## Toy differential gene expression

```{r}
control.inds <- metadata$dex == "control"
control.countd <- counts[,control.inds]
```

Find the mean per gene across all control columns

```{r}
control.mean <- apply(control.countd,1,mean)
head(control.mean)
```

**Q3.** How would you make the above code in either approach more robust? Is there a function that could help here?

rowSums

**Q4.** Follow the same procedure for the `treated` samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called `treated.mean`)

```{r}
library(dplyr)
treated <- metadata %>% filter(dex=="treated")
treated.counts <- counts %>% select(treated$id) 
treated.mean <- rowSums(treated.counts)/4
head(treated.mean)
```

```{r}
meancounts <- data.frame(control.mean, treated.mean)
```

**Q5 (a).** Create a scatter plot showing the mean of the treated samples against the mean of the control samples. Your plot should look something like the following.

```{r}
plot(meancounts[,1],meancounts[,2], xlab="Control", ylab="Treated")
```

**Q5 (b).**You could also use the **ggplot2** package to make this figure producing the plot below. What **geom\_?()** function would you use for this plot?

geom_point()

```{r}
library(ggplot2)

ggplot(meancounts, aes(x = control.mean, y = treated.mean)) +
  geom_point() +
  labs(x = "Control", y = "Treated")
```

**Q6.** Try plotting both axes on a log scale. What is the argument to **plot()** that allows you to do this?

log

```{r}
log2(10/10)
```

```{r}
plot(meancounts, log ="xy")
```

```{r}
meancounts$log2fc <- log2(meancounts[,"treated.mean"]/meancounts[,"control.mean"])
head(meancounts)
```

```{r}
zero.vals <- which(meancounts[,1:2]==0, arr.ind=TRUE)

to.rm <- unique(zero.vals[,1])
mycounts <- meancounts[-to.rm,]
head(mycounts)
```

**Q7.** What is the purpose of the `arr.ind` argument in the **which()** function call above? Why would we then take the first column of the output and need to call the **unique()** function?

The arr.ind=TRUE in which() filters the values in control.mean and treatment.mean that is 0 and returns their position for the next step removal. We want to take the first column out and need to call the unique() function to remove each rows only once when we filter the data.

```{r}
up.ind <- mycounts$log2fc > 2
down.ind <- mycounts$log2fc < (-2)
```

**Q8.** Using the `up.ind` vector above can you determine how many up regulated genes we have at the greater than 2 fc level?

```{r}
sum(up.ind)
```

**Q9.** Using the `down.ind` vector above can you determine how many down regulated genes we have at the greater than 2 fc level?

```{r}
sum(down.ind)
```

**Q10.** Do you trust these results? Why or why not?

We would not trust these results because we haven't check the statistical significance yet.

## **Setting up for DESeq**

```{r}
library(DESeq2)
citation("DESeq2")
```

```{r}
dds <- DESeqDataSetFromMatrix(countData=counts, 
                              colData=metadata, 
                              design=~dex)
dds
```

## **Principal Component Analysis (PCA)**

```{r}
vsd <- vst(dds, blind = FALSE)
plotPCA(vsd, intgroup = c("dex"))
```

```{r}
pcaData <- plotPCA(vsd, intgroup=c("dex"), returnData=TRUE)
head(pcaData)
```

```{r}
# Calculate percent variance per PC for the plot axis labels
percentVar <- round(100 * attr(pcaData, "percentVar"))
```

```{r}
ggplot(pcaData) +
  aes(x = PC1, y = PC2, color = dex) +
  geom_point(size =3) +
  xlab(paste0("PC1: ", percentVar[1], "% variance")) +
  ylab(paste0("PC2: ", percentVar[2], "% variance")) +
  coord_fixed() +
  theme_bw()
```

## **DESeq analysis**

```{r}
dds <- DESeq(dds)
```

```{r}
res <- results(dds)
summary(res)
```

```{r}
res05 <- results(dds, alpha=0.05)
summary(res05)
```

## **Adding annotation data**

```{r}
#BiocManager::install("AnnotationDbi")
#BiocManager::install("org.Hs.eg.db")
library("AnnotationDbi")
library("org.Hs.eg.db")
```

```{r}
columns(org.Hs.eg.db)
```

```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="SYMBOL",       # The new format we want to add
                     multiVals="first")
head(res)
```

**Q11.** Run the **mapIds()** function two more times to add the Entrez ID and UniProt accession and GENENAME as new columns called `res$entrez`, `res$uniprot` and `res$genename`.

```{r}
res$entrez <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="ENTREZID",
                     keytype="ENSEMBL",
                     multiVals="first")

res$uniprot <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="UNIPROT",
                     keytype="ENSEMBL",
                     multiVals="first")

res$genename <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="GENENAME",
                     keytype="ENSEMBL",
                     multiVals="first")

head(res)
```

```{r}
ord <- order( res$padj )
#View(res[ord,])
head(res[ord,])
```

```{r}
write.csv(res[ord,], "deseq_results.csv")
```

## **Data Visualization**

```{r}
plot( res$log2FoldChange,  -log(res$padj), 
      xlab="Log2(FoldChange)",
      ylab="-Log(P-value)")
```

```{r}
plot( res$log2FoldChange,  -log(res$padj), 
 ylab="-Log(P-value)", xlab="Log2(FoldChange)")

# Add some cut-off lines
abline(v=c(-2,2), col="darkgray", lty=2)
abline(h=-log(0.05), col="darkgray", lty=2)
```

```{r}
# Setup our custom point color vector 
mycols <- rep("gray", nrow(res))
mycols[ abs(res$log2FoldChange) > 2 ]  <- "red" 

inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "blue"

# Volcano plot with custom colors 
plot( res$log2FoldChange,  -log(res$padj), 
 col=mycols, ylab="-Log(P-value)", xlab="Log2(FoldChange)" )

# Cut-off lines
abline(v=c(-2,2), col="gray", lty=2)
abline(h=-log(0.1), col="gray", lty=2)
```

I want to save my results to date out to disc

```{r}
write.csv(res, file = "myresults.csv")
```

We will pick this up nextday and add annotations and do pathway analysis

```{r}
# Run in your R console (i.e. not your Rmarkdown doc!)
#BiocManager::install( c("pathview", "gage", "gageData") )
```

```{r}
library(pathview)
library(gage)
library(gageData)

data(kegg.sets.hs)

# Examine the first 2 pathways in this kegg set for humans
head(kegg.sets.hs, 2)
```

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```

```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
attributes(keggres)
```

```{r}
# Look at the first three down (less) pathways
head(keggres$less, 3)
```

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05310")
```

![](hsa05310.png)

```{r}
# A different PDF based output of the same data
pathview(gene.data=foldchanges, pathway.id="hsa05310", kegg.native=FALSE)
```

![](hsa05310.pathview.png)

**Q12**. Can you do the same procedure as above to plot the pathview figures for the top 2 down-reguled pathways?

```{r}
keggres_down_regulated <- rownames(keggres$less)[1:2]

# Extract the 8 character long IDs part of each string
keggresids_down = substr(keggres_down_regulated, start=1, stop=8)
keggresids_down
```

```{r}
pathview(gene.data=foldchanges, pathway.id=keggresids_down, species="hsa")
```

![](hsa05332.pathview.png)![](hsa04940.pathview.png)
